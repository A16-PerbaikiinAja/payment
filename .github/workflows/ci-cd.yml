name: CI/CD Workflows

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # PMD Analysis Job
  pmd:
    name: PMD Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Run PMD
        uses: pmd/pmd-github-action@v2
        with:
          version: '7.0.0-rc4'
          sourcePath: 'src/main/java'
          rulesets: 'rulesets/java/quickstart.xml'
          analyzeModifiedFilesOnly: false

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif

  # Scorecard Security Analysis Job
  scorecard:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
    steps:
      - name: "Checkout code"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: "Run analysis"
        uses: ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736 # v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Deployment to EC2 Job
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [ pmd, scorecard ]  # Ensure this job runs only after PMD and Scorecard jobs are successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew

      - name: Build with Gradle Kotlin DSL (skip tests)
        run: ./gradlew build -x test

      - name: Confirm JAR exists
        run: ls -lh build/libs

      - name: Copy JAR and Dockerfile to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AWS_SERVER }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          source: "build/libs/*.jar,Dockerfile"
          target: /home/ec2-user/app

      - name: SSH and deploy with Docker and create .env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_SERVER }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/ec2-user/app

            # Ensure the .env file is created in the correct directory
            cat <<EOF > .env
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF

            # Check if the .env file is created correctly
            cat .env

            # Move the JAR file and handle Docker deployment
            mv build/libs/*.jar app.jar || true

            # Stop and remove any previous containers
            docker stop springboot-app || true
            docker rm springboot-app || true

            # Build the Docker image
            docker build -t springboot-app .

            # Run the container using the .env file
            docker run -d -p 8080:8080 --name springboot-app --env-file /home/ec2-user/app/.env -v /home/ec2-user/app/build/libs:/app springboot-app
